
// Generated by Github Copilot


#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art_root_io/TFileService.h"
#include "canvas/Persistency/Common/FindManyP.h"
#include "canvas/Persistency/Common/Ptr.h"
#include "canvas/Persistency/Common/PtrVector.h"
#include "canvas/Persistency/Common/PtrMaker.h"
#include "canvas/Persistency/Common/PtrVector.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "lardataobj/RecoBase/Track.h"
#include "lardataobj/MCBase/MCParticle.h"
#include "lardata/Utilities/AssociationUtil.h"

#include "TTree.h"

class Muchecks : public art::EDAnalyzer {
public:
    explicit Muchecks(fhicl::ParameterSet const& p);

    void analyze(art::Event const& e) override;
    void beginJob() override;

private:
    art::InputTag fTrackLabel;
    art::InputTag fMCParticleLabel;

    TTree* fTree;
    float fRecoEndX, fRecoEndY, fRecoEndZ;
    float fTrueEndX, fTrueEndY, fTrueEndZ;
};

Muchecks::Muchecks(fhicl::ParameterSet const& p)
    : EDAnalyzer{p},
        fTrackLabel(p.get<art::InputTag>("TrackLabel")),
        fMCParticleLabel(p.get<art::InputTag>("MCParticleLabel"))
{}

void Muchecks::beginJob() {
    art::ServiceHandle<art::TFileService> tfs;
    fTree = tfs->make<TTree>("MuchecksTree", "Tree with muon end point checks");

    fTree->Branch("RecoEndX", &fRecoEndX, "RecoEndX/F");
    fTree->Branch("RecoEndY", &fRecoEndY, "RecoEndY/F");
    fTree->Branch("RecoEndZ", &fRecoEndZ, "RecoEndZ/F");
    fTree->Branch("TrueEndX", &fTrueEndX, "TrueEndX/F");
    fTree->Branch("TrueEndY", &fTrueEndY, "TrueEndY/F");
    fTree->Branch("TrueEndZ", &fTrueEndZ, "TrueEndZ/F");
}

void Muchecks::analyze(art::Event const& e) {
    auto const& trackHandle = e.getValidHandle<std::vector<recob::Track>>(fTrackLabel);
    auto const& mcParticleHandle = e.getValidHandle<std::vector<sim::MCParticle>>(fMCParticleLabel);

    for (auto const& track : *trackHandle) {
        fRecoEndX = track.End().X();
        fRecoEndY = track.End().Y();
        fRecoEndZ = track.End().Z();

        for (auto const& mcParticle : *mcParticleHandle) {
            if (mcParticle.PdgCode() == 13) { // Muon PDG code
                fTrueEndX = mcParticle.EndX();
                fTrueEndY = mcParticle.EndY();
                fTrueEndZ = mcParticle.EndZ();
                fTree->Fill();
                break;
            }
        }
    }
}

DEFINE_ART_MODULE(Muchecks)