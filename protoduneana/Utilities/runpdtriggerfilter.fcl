#include "ProtoDUNETriggerFilter.fcl"

process_name: PDSPTrigerFilter

services:
{
  # Load the service that manages root files for histograms.
    #TFileService: { fileName: "filtered_hist.root" }
  TimeTracker:       {}
#  RandomNumberGenerator: {} #ART native random number generator
#  message:      @local::standard_warning
#  user:         @local::argoneut_services
}


#source is now a root file
source:
{
  module_type: RootInput
  #maxEvents:  10        # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_filtered.root" #default file name, can override from command line with -o or --output
   SelectEvents:[reco]
   fastCloning: true
 }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers: { }

 filters: {
  filter:  @local::pdsp_trigfilter_beam
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ filter ] 
# reco: []
 #filter: [ muonfilter ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ reco ] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ stream1 ]  
}
#physics.filters.filter.TimingFlagSelectList: [0x8]  #cosmic
#physics.filters.filter.TimingFlagSelectList: [0xc]  #beam
#physics.filters.filter.TimingFlagSelectList: [0xd]  #CRT
