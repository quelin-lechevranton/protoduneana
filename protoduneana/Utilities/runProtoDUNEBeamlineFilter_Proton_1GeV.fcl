#include "services_dune.fcl"
#include "BeamEvent.fcl"
#include "ProtoDUNEBeamlineFilter.fcl"



process_name: BeamFilter

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "BeamlineFilter_hist.root" }
  TimeTracker:       {}
  MemoryTracker:     {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_data
                        @table::protodune_services
}


source:
{
  module_type: RootInput
  maxEvents: -1
  fileNames: ["input_file.root"]
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "filtered.root" #default file name, can override from command line with -o or --output
   dataTier: "reconstructed"
   SelectEvents: [reco]
   fastCloning: true
 }
}

physics:
{
 producers:
 {
 }
  filters:
 {
 filter:   @local::standard_protodunebeamlinefilter_Proton_1GeV

  }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ filter ] 
 stream1:  [ out1 ]
 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ reco ] 
 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ stream1 ]  
}

##############################################################
##############################################################
##############################################################

### Uncomment below to redo Beam Instrumentation Reconstruction
#services.IFBeam:  {}
#physics.producers.beamevent: @local::proto_beamevent
#physics.reco: [ beamevent, filter ]
#physics.filters.filter.BeamlineUtils.TOFOffset: 0.
#physics.filters.filter.BeamlineUtils.UseCERNCalibSelection: true
