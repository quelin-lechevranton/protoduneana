#include "services_dune.fcl"
#include "ProtoDUNEBeamlineUtils.fcl"
#include "protoDUNE_reco_data_prolog.fcl"
#include "protodune_tools_dune.fcl"

process_name: BoxBeamTruncation

services:
{
  #Load the service that manages root files for histograms.
  TFileService: { fileName: "hitremoval.root" }
  TimeTracker:       {}
  MemoryTracker:         { }     #default is one
  RandomNumberGenerator: {}                     #ART native random number generator
                @table::protodune_data_reco_services
  message:      @local::standard_info
  IFDH: {}
}

services.SpaceCharge.EnableCalEfieldSCE: true
services.SpaceCharge.EnableCalSpatialSCE: true

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1            # Number of events to create
}

physics:
{
  producers:
  {   
      @table::protoDUNE_reco_data_stage1_producers

      hitpdune: {module_type:          "HadronHitsRemoval"
        GeneratorTag:         "generator"
        BeamlineUtils:        @local::standard_protodunebeamlineutils

        PFParticleTag:           "pandoraBoxBeam"
        HitModuleLabel:          "hitpduneBoxBeam"
        CalorimetryTagSCE:       "pandoracaloBoxBeam"
        TrackerTag:              "pandoraTrackBoxBeam"
        Limit1: 100.
        Limit2Lower: 230.
        TruncationLength: 10.
      }
  }

  reco: [
         hitpdune,
         pandora,
         pandoraTrack,
         pandoraShower,
         pandoracalonosce
        ]
  stream1:  [ out1 ]
  trigger_paths: [reco]
  end_paths:     [stream1]
}


outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_box_beam_truncated.root"
   dataTier:    "full-reconstructed"
   compressionLevel: 1
   saveMemoryObjectThreshold: 0
 }
}

outputs.out1.outputCommands: [ 
  "keep *", "drop *_hitpdune_*_Reco1", "drop *_pandora*_*_Reco1", "drop *_anodepiercerst0_*_Reco1", "drop *_op*_*_Reco1", "drop *_emtrkmichelid_*_Reco2",
  "drop *_*_*_BoxBeamHitsRemoval"
]
