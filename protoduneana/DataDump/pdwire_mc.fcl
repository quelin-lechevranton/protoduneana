#include "protoDUNE_reco_mc_prolog.fcl"
#include "ProtoDUNETriggerFilter.fcl"

#include "protodune_tools_dune.fcl"

process_name: Reco

services:
{
  TimeTracker:       @local::dune_time_tracker
  MemoryTracker:     @local::dune_memory_tracker
  TFileService:      { fileName: "reco_protoDUNE_hist.root" }
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::protodune_reco_services
  IFDH:               {}
}
#services.RawDigitPrepService.ToolNames: @local::protodune_dataprep_tools_evd
services.RawDigitPrepService.ToolNames: [
  @sequence::protodune_dataprep_tools_calib_noiserem,
  "adcKeepAllSignalFinder"
]
# This is temporary for dunetpc v09_15_00 and earlier.
services.RawDigitPrepService.AdcChannelToolNames: @local::services.RawDigitPrepService.ToolNames

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents: 1
  fileNames: ["detsim_single_protoDUNE.root"]
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: {

  filters: {
    trigfilter:  @local::pdsp_trigfilter_all
  }

  producers: {
    @table::protoDUNE_reco_mc_stage1_producers
  }

  #define the producer and filter modules for this path, order matters, 
  #filters reject all following items.  see lines starting physics.producers below
  reco: [ caldata ]
 
  #define the output stream, there could be more than one if using filters 
  stream1:  [ out1 ]

  #trigger_paths is a keyword and contains the paths that modify the art::event, 
  #ie filters and producers
  trigger_paths: [reco] 

  #end_paths is a keyword and contains the paths that do not modify the art::Event, 
  #ie analyzers and output streams.  these all run simultaneously
  end_paths:     [stream1]  
}

physics.producers.caldata.OutputDigitName: "dataprep"

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_reco.root"
   dataTier:    "full-reconstructed"
   compressionLevel: 1
 }
}

